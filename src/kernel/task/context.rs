// src/kernel/task/context.rs

//! Estrutura que define o Contexto de Execu√ß√£o (Task Context) para uma thread.
//! 
//! Cont√©m todos os registradores que precisam ser salvos e restaurados durante
//! a troca de contexto.

use x86_64::VirtAddr;

/// üß† O Contexto de Execu√ß√£o (Conjunto de Registradores).
/// * Os campos devem refletir exatamente o que o c√≥digo Assembly de troca de contexto 
/// * espera salvar/restaurar.
#[derive(Debug, Default, Clone, Copy)]
#[repr(C)] // Garante a ordem e o layout C (crucial para Assembly)
pub struct TaskContext {
    // Ordem de salvamento/restaura√ß√£o dos registradores:
    pub rflags: u64,
    pub rbx: u64,
    pub rbp: u64,
    pub r12: u64,
    pub r13: u64,
    pub r14: u64,
    pub r15: u64,
    pub rsp: u64, // Stack Pointer (√∫ltimo a ser restaurado)
    
    // NOTA: O RIP (Instruction Pointer) √© manipulado separadamente
    // ou como parte de uma Interrup√ß√£o Stack Frame.
}

impl TaskContext {
    /// üè≠ Cria um contexto inicial para uma nova tarefa.
    /// * O contexto √© manipulado para simular o retorno de uma interrup√ß√£o.
    pub fn new(stack_top: VirtAddr, entry_point_addr: u64) -> Self {
        let mut context = TaskContext::default();
        
        // 1. Configurar o Stack Pointer (RSP)
        // A stack de contexto deve apontar para onde o c√≥digo Assembly
        // esperaria encontrar o contexto inicial (incluindo o endere√ßo de retorno/entry point).
        
        // Simula√ß√£o do Stack Frame da Interrup√ß√£o:
        // O Rust/C++ espera que o rsp aponte para o topo da TaskContext.
        context.rsp = stack_top.as_u64();
        
        // O RIP deve ser definido como o endere√ßo da fun√ß√£o de entrada.
        // J√° que a troca de contexto √© feita via Assembly (que lida com RIP),
        // este endere√ßo de entrada √© armazenado temporariamente em RBX/RCX
        // ou escrito diretamente no topo da stack.
        
        // Para simplificar, armazenamos o entry point em um registrador que ser√°
        // copiado para o RIP pelo assembly (ex: R15).
        context.r15 = entry_point_addr;
        
        // RFLAGS: Habilitar interrup√ß√µes (bit 9 setado)
        context.rflags = 0x202; // Bit 1 (sempre setado) + Bit 9 (Interrupt Enable)
        
        context
    }
}
