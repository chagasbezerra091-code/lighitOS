// src/com/proto/devices/os/lighit/Bundle/server/trusty/TrustyServiceManager.java
package com.proto.devices.os.lighit.Bundle.server.trusty;

import java.nio.ByteBuffer;
import java.util.UUID;

/**
 * üîê Gerenciador de Servi√ßos Confi√°veis (Trusty Service Manager).
 * * * Esta classe atua como uma ponte entre as aplica√ß√µes do LightOS Userspace
 * * e o ambiente de execu√ß√£o confi√°vel (TEE/Trusty), geralmente implementado
 * * atrav√©s de chamadas de sistema (syscalls) para o Kernel Rust.
 */
public class TrustyServiceManager {

    /**
     * ID de Servi√ßo (UUID) de um servi√ßo confi√°vel no ambiente Trusty TEE.
     * * Exemplo: Gerenciador de Chaves ou Autentica√ß√£o Biom√©trica.
     */
    private final UUID serviceId;

    // ------------------------------------------------------------------------
    // --- M√©todos de Intera√ß√£o de Baixo N√≠vel (Nativas/FFI) ---
    // ------------------------------------------------------------------------

    // Fun√ß√£o nativa para conectar a um servi√ßo Trusty (fazendo uma Syscall para o Kernel Rust)
    private native long nativeConnect(byte[] serviceIdBytes);

    // Fun√ß√£o nativa para enviar um comando e receber uma resposta
    private native int nativeSendCommand(long handle, ByteBuffer command, ByteBuffer response);

    // Fun√ß√£o nativa para fechar a conex√£o
    private native void nativeClose(long handle);
    
    // Carregar a biblioteca nativa do Userspace do LightOS que lida com as Syscalls TEE
    static {
        try {
            // Em um Userspace real, esta seria a biblioteca de Syscalls do LightOS
            System.loadLibrary("lightos_trusty_syscalls"); 
        } catch (UnsatisfiedLinkError e) {
            System.err.println("ERRO TRUSTY: Falha ao carregar a biblioteca nativa Trusty.");
        }
    }

    // ------------------------------------------------------------------------
    // --- API P√∫blica do Servi√ßo ---
    // ------------------------------------------------------------------------

    /**
     * @brief Construtor que define o ID do Servi√ßo Confi√°vel.
     * @param serviceId O UUID do servi√ßo TEE alvo (ex: Trusted Keymaster).
     */
    public TrustyServiceManager(UUID serviceId) {
        this.serviceId = serviceId;
        System.out.println("Trusty Manager criado para o servi√ßo: " + serviceId.toString());
    }

    /**
     * @brief Abre uma conex√£o com o Servi√ßo Confi√°vel.
     * @return Um Handle (identificador) de conex√£o de 64 bits.
     * @throws RuntimeException se a conex√£o falhar.
     */
    public long connect() throws RuntimeException {
        // Converte o UUID para um array de bytes para FFI
        ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
        bb.putLong(serviceId.getMostSignificantBits());
        bb.putLong(serviceId.getLeastSignificantBits());
        
        long handle = nativeConnect(bb.array());
        
        if (handle <= 0) {
            throw new RuntimeException("Falha ao conectar ao servi√ßo Trusty. Handle retornado: " + handle);
        }
        return handle;
    }

    /**
     * @brief Envia um comando ass√≠ncrono para o servi√ßo confi√°vel.
     * @param handle O Handle de conex√£o.
     * @param command O buffer de comando a ser enviado.
     * @param response O buffer para receber a resposta do TEE.
     * @return O tamanho da resposta recebida.
     */
    public int sendCommand(long handle, ByteBuffer command, ByteBuffer response) {
        if (handle <= 0) {
            System.err.println("ERRO: Handle de conex√£o inv√°lido.");
            return -1;
        }
        
        command.flip(); // Prepara o buffer para leitura nativa
        int result = nativeSendCommand(handle, command, response);
        response.flip(); // Prepara o buffer para leitura Java
        
        return result;
    }

    /**
     * @brief Fecha a conex√£o com o Servi√ßo Confi√°vel.
     * @param handle O Handle de conex√£o.
     */
    public void close(long handle) {
        if (handle > 0) {
            nativeClose(handle);
            System.out.println("Conex√£o Trusty fechada (Handle: " + handle + ")");
        }
    }
}
